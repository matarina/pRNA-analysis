data <- data.frame("group" = names(WhatIHave), WhatIHave)
vals <- paste(data$WhatIHave, sep = "")
library(plotly)
q <- plot_ly(data, labels = ~group, values = ~WhatIHave, type = 'pie',textinfo = "text + values", text = vals, textfont = list( size = 15)) %>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),legend = list(font = list(size = 24)))
q
WhatIHave <- c("CpG_bi-pRNA" = 1605,
"nonCpG_bi-pRNA" = 91)
data <- data.frame("group" = names(WhatIHave), WhatIHave)
vals <- paste(data$WhatIHave, sep = "")
library(plotly)
q <- plot_ly(data, labels = ~group, values = ~WhatIHave, type = 'pie',textinfo = "text + values", text = vals, textfont = list( size = 15)) %>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),legend = list(font = list(size = 24)))
q
WhatIHave <- c("all_promoter" = 14759,
"nbidirectional_promoter" = 1696)
data <- data.frame("group" = names(WhatIHave), WhatIHave)
vals <- paste(data$WhatIHave, sep = "")
library(plotly)
q <- plot_ly(data, labels = ~group, values = ~WhatIHave, type = 'pie',textinfo = "text + values", text = vals, textfont = list( size = 15)) %>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),legend = list(font = list(size = 24)))
q
WhatIHave <- c("all_promoter" = 14759,
"bidirectional_promoter" = 1696)
data <- data.frame("group" = names(WhatIHave), WhatIHave)
vals <- paste(data$WhatIHave, sep = "")
library(plotly)
q <- plot_ly(data, labels = ~group, values = ~WhatIHave, type = 'pie',textinfo = "text + values", text = vals, textfont = list( size = 15)) %>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),legend = list(font = list(size = 24)))
q
WhatIHave <- c("all_bi-pRNA" = 1128,
"expressed_bi-pRNA" = 179)
data <- data.frame("group" = names(WhatIHave), WhatIHave)
vals <- paste(data$WhatIHave, sep = "")
library(plotly)
q <- plot_ly(data, labels = ~group, values = ~WhatIHave, type = 'pie',textinfo = "text + values", text = vals, textfont = list( size = 15)) %>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),legend = list(font = list(size = 24)))
q
# Installing package
install.packages("survival")
# Loading package
library(survival)
# Dataset information
?lung
# Fitting the survival model
Survival_Function = survfit(Surv(lung$time,
lung$status == 2)~1)
Survival_Function
# Plotting the function
plot(Survival_Function)
lung
bidirection = read.csv("H:/closed.bed",header = FALSE,sep = '\t')
bidirection$results = ifelse(bidirection$V3 > bidirection$V2, 'yes',
ifelse(bidirection$V3 < bidirection$V2, 'no', 'None'))
rm(list=ls(0))
rm(list=ls())
bidirection = read.csv("H:/closed.bed",header = FALSE,sep = '\t')
bidirection$results = ifelse(bidirection$V3 > bidirection$V2, 'yes',
ifelse(bidirection$V3 < bidirection$V2, 'no', 'None'))
subset1 = bidirection[grep("no",bidirection$results),]
subset1 = subset1[,c(1,3,2,4,5,6,7)]
colnames(subset1)[2] = "V2"
colnames(subset1)[3] = "V3"
subset1 = subset1[,-7]
subset2 = bidirection[grep("yes",bidirection$results),]
subset2 = subset2[,-7]
fff = rbind(subset1,subset2)
write.table(fff,"H:bi_prna.bed",row.names = FALSE,quote = FALSE,sep = '\t',col.names = FALSE)
bi_exp = read.csv("H:/output.txt",sep = '\t',skip = 1)
View(bi_exp)
bi_exp$mean = (bi_exp$SRR8131644.sort.bam+bi_exp$SRR8131645.sort.bam)/2
library(dplyr)
bi_exp  = filter(bi_exp,mean>4)
View(bi_exp)
View(bi_exp)
bi_prna_masked  = read.csv("H:/bi_prna_masked.bed",header = FALSE,sep = '\t')
View(bi_prna_masked)
bi_exp$Geneid %in% bi_prna_masked$V4
bi_prna_masked[which(bi_exp$Geneid %in% bi_prna_masked$V4),]
bi_exp_prna_masked = bi_prna_masked[which(bi_exp$Geneid %in% bi_prna_masked$V4),]
write.csv(bi_exp_prna_masked,"H:/biprna_expressed_masked.bed",col.names = FALSE,row.names = FALSE,quote = FALSE)
write.csv(bi_exp_prna_masked,"H:/biprna_expressed_masked.bed",row.names = FALSE,quote = FALSE)
write.table(bi_exp_prna_masked,"H:/biprna_expressed_masked.bed",sep = '\t',col.names = FALSE,row.names = FALSE,quote = FALSE)
WhatIHave <- c("expressed_pRNA_non_CpG" = 9,
"expressed_pRNA_CpG" = 170)
data <- data.frame("group" = names(WhatIHave), WhatIHave)
vals <- paste(data$WhatIHave, sep = "")
library(plotly)
q <- plot_ly(data, labels = ~group, values = ~WhatIHave, type = 'pie',textinfo = "text + values", text = vals, textfont = list( size = 15)) %>%
layout(title = "",
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),legend = list(font = list(size = 24)))
q
#install if necessary
source("http://bioconductor.org/biocLite.R")
[1] 35423
#install if necessary
source("http://bioconductor.org/biocLite.R")
biocLite("biomaRt")
#load library
library("biomaRt")
#use ensembl mart
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
#store the filters
filters <- listFilters(ensembl)
#look for filters with the string refseq
grep('refseq', filters$name, ignore.case=T, value=T)
#store the attributes we can fetch
attributes <- listAttributes(ensembl)
#check out the first 10 attributes
head(attributes,10)
#create vector of chromosomes
my_chr <- c(1:22,'X','Y')
#fetch refseqs
my_refseq <- getBM(attributes='refseq_mrna',
filters = 'chromosome_name',
values = my_chr,
mart = ensembl)
#how many entries 2013 November 28th
length(my_refseq)
[1] 35423
#load library
library("biomaRt")
#use ensembl mart
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
#store the filters
filters <- listFilters(ensembl)
#look for filters with the string refseq
grep('refseq', filters$name, ignore.case=T, value=T)
#[1] "with_refseq_peptide"            "with_refseq_peptide_predicted"  "with_ox_refseq_mrna"
#[4] "with_ox_refseq_mrna_predicted"  "with_ox_refseq_ncrna"           "with_ox_refseq_ncrna_predicted"
#[7] "refseq_mrna"                    "refseq_mrna_predicted"          "refseq_ncrna"
#[10] "refseq_ncrna_predicted"         "refseq_peptide"                 "refseq_peptide_predicted"
#store the attributes we can fetch
attributes <- listAttributes(ensembl)
#check out the first 10 attributes
head(attributes,10)
#                    name           description
#1        ensembl_gene_id       Ensembl Gene ID
#2  ensembl_transcript_id Ensembl Transcript ID
#3     ensembl_peptide_id    Ensembl Protein ID
#4        ensembl_exon_id       Ensembl Exon ID
#5            description           Description
#6        chromosome_name       Chromosome Name
#7         start_position       Gene Start (bp)
#8           end_position         Gene End (bp)
#9                 strand                Strand
#10                  band                  Band
#create vector of chromosomes
my_chr <- c(1:22,'X','Y')
#fetch refseqs
my_refseq <- getBM(attributes='refseq_mrna',
filters = 'chromosome_name',
values = my_chr,
mart = ensembl)
#how many entries 2013 November 28th
length(my_refseq)
#check out the first few
head(my_refseq)
#[1] "NM_001084392" "NM_001355"    "NR_036221"    "NM_138450"    "NM_022840"
#[6] "NM_173505"
#I only want entries starting with a NM (curated mRNA)
my_refseq <- my_refseq[grep(pattern="^NM",x=my_refseq,perl=T)]
length(my_refseq)
#[1] 33584
#check to see if only NM
head(my_refseq)
#[1] "NM_001084392" "NM_001355"    "NM_138450"    "NM_022840"    "NM_173505"
#[6] "NM_033453"
#build attribute vector
my_attribute <- c('refseq_mrna',
'chromosome_name',
'transcript_start',
'transcript_end',
'strand')
#fetch refseqs and their chromosomal locations
my_refseq_loci <- getBM(attributes=my_attribute,
filters = c('refseq_mrna', 'chromosome_name'),
values = list(refseq_mrna=my_refseq, chromosome_name=my_chr),
mart = ensembl)
getBM(attributes=c('refseq_mrna','chromosome_name','start_position','e
nd_position','strand')
getB
getBM(attributes=c('refseq_mrna','chromosome_name','start_position','e
nd_position','strand'))
getBM(attributes=c('refseq_mrna','chromosome_name','start_position','e
nd_position','strand'),mart = ensembl)
#store the attributes we can fetch
attributes <- listAttributes(ensembl)
#check out the first 10 attributes
head(attributes,10)
#fetch refseqs
my_refseq <- getBM(attributes='start_position',
filters = 'chromosome_name',
values = my_chr,
mart = ensembl)
getBM(attributes=c('refseq_mrna','chromosome_name','start_position','e
nd_position','strand'),
filters = 'refseq_mrna', values = 'NM_033453', mart = ensembl)
getBM(attributes=c('refseq_mrna','chromosome_name','start_position','end_position','strand'),
filters = 'refseq_mrna', values = 'NM_033453', mart = ensembl)
getBM(attributes=c('refseq_mrna','chromosome_name','start_position','end_position','strand'),
filters = 'refseq_mrna', mart = ensembl)
getBM(attributes=c('refseq_mrna','chromosome_name','start_position','end_position','strand'),
filters = 'refseq_mrna', values = my_chr,mart = ensembl)
#use ensembl mart
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
#store the filters
filters <- listFilters(ensembl)
filters#look for filters with the string refseq
filters$name#look for filters with the string refseq
grep('refseq', filters$name, ignore.case=T, value=T)
#store the attributes we can fetch
attributes <- listAttributes(ensembl)
#check out the first 10 attributes
head(attributes,10)
#create vector of chromosomes
my_chr <- c(1:22,'X','Y')
my_chr
#fetch refseqs
my_refseq <- getBM(attributes='refseq_mrna',
filters = 'chromosome_name',
values = my_chr,
mart = ensembl)
#how many entries 2013 November 28th
length(my_refseq)
View(my_refseq)
#how many entries 2013 November 28th
length(my_refseq$refseq_mrna)
head(my_refseq)
#I only want entries starting with a NM (curated mRNA)
my_refseq <- my_refseq[grep(pattern="^NM",x=my_refseq,perl=T)]
length(my_refseq)
View(my_refseq)
#fetch refseqs
my_refseq <- getBM(attributes='refseq_mrna',
filters = 'chromosome_name',
values = my_chr,
mart = ensembl)
#[1] 35423
my_refseq = my_refseq$refseq_mrna
#I only want entries starting with a NM (curated mRNA)
my_refseq <- my_refseq[grep(pattern="^NM",x=my_refseq,perl=T)]
length(my_refseq)
#check to see if only NM
head(my_refseq)
#build attribute vector
my_attribute <- c('refseq_mrna',
'chromosome_name',
'transcript_start',
'transcript_end',
'strand')
#fetch refseqs and their chromosomal locations
my_refseq_loci <- getBM(attributes=my_attribute,
filters = c('refseq_mrna', 'chromosome_name'),
values = list(refseq_mrna=my_refseq, chromosome_name=my_chr),
mart = ensembl)
#fetch refseqs and their chromosomal locations
my_refseq_loci <- getBM(attributes=my_attribute,
filters = c('refseq_mrna', 'chromosome_name'),
values = list(refseq_mrna=my_refseq, chromosome_name=my_chr),
mart = ensembl)
dim(my_refseq_loci)
#[1] 33657     5
#how many refseq ids are listed in multiple places?
table(duplicated(my_refseq_loci$refseq_mrna))
#FALSE  TRUE
#33584    73
#get rid of the duplicated entry
my_refseq_loci <- my_refseq_loci[!duplicated(my_refseq_loci$refseq_mrna),]
dim(my_refseq_loci)
#[1] 33584     5
#convert the strand into '-' and '+'
my_refseq_loci$strand <- gsub(pattern='-1', replacement='-', my_refseq_loci$strand)
my_refseq_loci$strand <- gsub(pattern='1', replacement='+', my_refseq_loci$strand)
#add a 'chr' into the chromosome_name
my_refseq_loci$chromosome_name <- gsub(pattern="^",
replacement='chr',
my_refseq_loci$chromosome_name)
#we now have a data frame of all human mRNA refseqs and their chromosomal locations
head(my_refseq_loci)
#   refseq_mrna chromosome_name transcript_start transcript_end strand
#1 NM_001084392           chr22         24313554       24316773      -
#2    NM_001355           chr22         24313554       24322019      -
#3    NM_138450           chr13         50202435       50208008      +
#4    NM_022840           chr18          2538452        2571485      -
#5    NM_033453           chr20          3190006        3204516      +
#6 NM_001267623           chr20          3190171        3204516      +
#I want locations of the region spanning the start of a refSeq
span <- 2
#store as another object
my_refseq_tss <- my_refseq_loci
#positive strand
#adjust the end position first, because we need the start position in our calculations
my_refseq_tss[my_refseq_tss$strand=='+','transcript_end'] <- my_refseq_tss[my_refseq_tss$strand=='+','transcript_start']+span
my_refseq_tss[my_refseq_tss$strand=='+','transcript_start'] <- my_refseq_tss[my_refseq_tss$strand=='+','transcript_start']-span
#negative strand
my_refseq_tss[my_refseq_tss$strand=='-','transcript_start'] <- my_refseq_tss[my_refseq_tss$strand=='-','transcript_end']-span
my_refseq_tss[my_refseq_tss$strand=='-','transcript_end'] <- my_refseq_tss[my_refseq_tss$strand=='-','transcript_end']+span
head(my_refseq_tss)
#   refseq_mrna chromosome_name transcript_start transcript_end strand
#1 NM_001084392           chr22         24316771       24316775      -
#2    NM_001355           chr22         24322017       24322021      -
#3    NM_138450           chr13         50202433       50202437      +
#4    NM_022840           chr18          2571483        2571487      -
#5    NM_033453           chr20          3190004        3190008      +
#6 NM_001267623           chr20          3190169        3190173      +
View(my_refseq_loci)
#   refseq_mrna chromosome_name transcript_start transcript_end strand
#1 NM_001084392           chr22         24313554       24316773      -
#2    NM_001355           chr22         24313554       24322019      -
#3    NM_138450           chr13         50202435       50208008      +
#4    NM_022840           chr18          2538452        2571485      -
#5    NM_033453           chr20          3190006        3204516      +
#6 NM_001267623           chr20          3190171        3204516      +
my_refseq_loci$score = rep("." , 62356)
View(my_refseq_loci)
#   refseq_mrna chromosome_name transcript_start transcript_end strand
#1 NM_001084392           chr22         24313554       24316773      -
#2    NM_001355           chr22         24313554       24322019      -
#3    NM_138450           chr13         50202435       50208008      +
#4    NM_022840           chr18          2538452        2571485      -
#5    NM_033453           chr20          3190006        3204516      +
#6 NM_001267623           chr20          3190171        3204516      +
my_refseq_loci$score = rep(1, 62356)
View(my_refseq_loci)
my_refseq_loci = my_refseq_loci[,c(2,3,4,1,6,5)]
View(my_refseq_loci)
write.table(my_refseq,quote = FALSE,col.names = FALSE,row.names = FALSE)
write.table(my_refseq,"H:/ncbi_ref_mrna.bed",quote = FALSE,col.names = FALSE,row.names = FALSE)
write.table(my_refseq_loci,"H:/ncbi_ref_mrna.bed",quote = FALSE,col.names = FALSE,row.names = FALSE)
write.table(my_refseq_loci,"H:/ncbi_ref_mrna.bed",quote = FALSE,col.names = FALSE,row.names = FALSE,sep = '\t')
mrna = read.csv("H:/prna_transcript_analysis/epd_promoter/chromesome_distribution/mrna_ENCFF010XLY.count",header = TRUE,skip = 1,sep = '\t')
View(mrna)
library(dplyr)
library(tidyr)
library(ggplot2)
mrna$chr = separate(mrna,chr,into = c("chr","dump"),sep = ';')
mrna$chr = separate(mrna,Chr,into = c("chr","dump"),sep = ';')
View(mrna)
mrna = read.csv("H:/prna_transcript_analysis/epd_promoter/chromesome_distribution/mrna_ENCFF010XLY.count",header = TRUE,skip = 1,sep = '\t')
mrna = separate(mrna,Chr,into = c("chr","dump"),sep = ';')
View(mrna)
mrna_expr = read.csv("H:/prna_transcript_analysis/epd_promoter/encode_data_pca/latest_annotation/mrna_expr.txt",sep = '\t')
View(mrna_expr)
View(mrna)
mrna = mrna[,c(1,2)]
View(mrna_expr)
colnames(mrna_expr)[1] = "FEATURE_ID"
View(mrna)
colnames(mrna_expr)[1] = "Geneid"
mrna = inner_join(mrna,mrna_expr,by='Geneid')
View(mrna)
View(mrna)
mrna$mean_mrna = rowMeans(subset(mrna, select = c(3:65)))
View(mrna)
mrna_mask = filter(mrna,mean_mrna>0.5)
table_mrna = table(mrna_mask$chr)
table_mrna = as.data.frame(table_mrna)
View(table_mrna)
View(table_mrna)
colnames(table_mrna)[2] = "sense_mrna"
prna = read.csv("H:/prna_transcript_analysis/epd_promoter/chromesome_distribution/ps_ENCFF010XLY.count",header = TRUE,skip = 1,sep = '\t')
psrna = read.csv("H:/prna_transcript_analysis/epd_promoter/chromesome_distribution/ps_ENCFF010XLY.count",header = TRUE,skip = 1,sep = '\t')
View(psrna)
psrna_expr = read.csv("H:/prna_transcript_analysis/epd_promoter/encode_data_pca/latest_annotation/psrna_expr.txt",sep = '\t')
psrna_expr = read.csv("H:/prna_transcript_analysis/epd_promoter/encode_data_pca/latest_annotation/ps_expr.tsv",sep = '\t')
colnames(psrna_expr)[1] = "Geneid"
View(psrna_expr)
View(prna)
View(psrna)
psrna = psrna[,c(1,2)]
colnames(psrna_expr)[1] = "Geneid"
psrna = inner_join(psrna,psrna_expr,by='Geneid')
View(psrna)
psrna = read.csv("H:/prna_transcript_analysis/epd_promoter/chromesome_distribution/ps_ENCFF010XLY.count",header = TRUE,skip = 1,sep = '\t')
psrna = psrna[,c(1,2)]
psrna_expr = read.csv("H:/prna_transcript_analysis/epd_promoter/encode_data_pca/latest_annotation/ps_expr.tsv",sep = '\t')
colnames(psrna_expr)[1] = "Geneid"
psrna = inner_join(psrna,psrna_expr,by='Geneid')
psrna$mean_psrna = rowMeans(subset(psrna, select = c(3:65)))
psrna_mask = filter(psrna,mean_psrna>0.5)
table_psrna = table(psrna_mask$chr)
table_psrna = as.data.frame(table_psrna)
colnames(table_psrna)[2] = "sense_psrna"
View(table_psrna)
View(psrna_mask)
View(psrna_mask)
table_psrna = table(psrna_mask$Chr)
table_psrna = as.data.frame(table_psrna)
colnames(table_psrna)[2] = "sense_psrna"
### statistics of pasrna chromesome distribution
pasrna = read.csv("H:/prna_transcript_analysis/epd_promoter/chromesome_distribution/pas_ENCFF010XLY.count",header = TRUE,skip = 1,sep = '\t')
pasrna = pasrna[,c(1,2)]
pasrna_expr = read.csv("H:/prna_transcript_analysis/epd_promoter/encode_data_pca/latest_annotation/pas_expr.tsv",sep = '\t')
colnames(pasrna_expr)[1] = "Geneid"
pasrna = inner_join(pasrna,pasrna_expr,by='Geneid')
pasrna$mean_pasrna = rowMeans(subset(pasrna, select = c(3:65)))
pasrna_mask = filter(pasrna,mean_pasrna>0.5)
table_pasrna = table(pasrna_mask$Chr)
table_pasrna = as.data.frame(table_pasrna)
colnames(table_pasrna)[2] = "sense_pasrna"
colnames(table_mrna)[2] = "mrna"
colnames(table_psrna)[2] = "psrna"
colnames(table_pasrna)[2] = "pasrna"
library(tidyverse)
#put all data frames into list
df_list <- list(table_mrna,table_psrna,table_pasrna)
chromesome_distribution = df_list %>% reduce(full_join, by='Var1')
View(chromesome_distribution)
library(reshape2)
meltplot = melt(chromesome_distribution)
View(meltplot)
meltplot = meltplot[order(as.numeric(sub("\\D+", "", meltplot$Var1))),]
View(meltplot)
meltplot$Var1
library(ggplot2)
library(ggpubr)
# Basic barplot
library(cartography)
colnames(meltplot)[2]="group"
mypal <- carto.pal(pal1 = "pastel.pal", n1 = 3,middle = TRUE, transparency = FALSE)
p<-ggplot(data=meltplot, aes(x=Var1, y=value,fill=group,width=.5)) +
geom_bar(stat="identity", position=position_dodge())+
coord_flip()+ theme(panel.background = element_blank(),axis.text=element_text(size=10),axis.title=element_text(size=10,face="bold"),legend.text = element_text(size = 10),legend.title = element_text(size = 10))+scale_fill_manual(values = mypal)+labs(x = "")+labs(y = "Counts")
p
### dot plot
ggplot(chromesome_distribution, aes(x=psrna, y=pasrna)) + geom_point(color="#44D4EB")+ theme_classic()+geom_smooth(method = "lm", color="#DE616A")+
labs(x = "sense_pRNA_count")+labs(y = "antisense_pRNA_count")+stat_cor(method="pearson",size = 8)+theme(text = element_text(size = 20))+xlim(NA,160)
### dot plot
ggplot(chromesome_distribution, aes(x=psrna, y=pasrna)) + geom_point(color="#44D4EB")+ theme_classic()+geom_smooth(method = "lm", color="#DE616A")+
labs(x = "sense_pRNA_count")+labs(y = "antisense_pRNA_count")+stat_cor(method="pearson",size = 8)+theme(text = element_text(size = 20))
### dot plot
ggplot(chromesome_distribution, aes(x=psrna, y=pasrna)) + geom_point(color="#44D4EB")+ theme_classic()+geom_smooth(method = "lm", color="#DE616A")+
labs(x = "psRNA_count")+labs(y = "pasRNA_count")+stat_cor(method="pearson",size = 8)+theme(text = element_text(size = 20))
View(chromesome_distribution)
#549 477
ggplot(chromesome_distribution, aes(x=psrna, y=mrna)) + geom_point(color="#44D4EB")+ theme_classic()+geom_smooth(method = "lm", color="#DE616A")+
labs(x = "psRNA_count")+labs(y = "pasRNA_count")+stat_cor(method="pearson",size = 8)+theme(text = element_text(size = 20))
#549 477
ggplot(chromesome_distribution, aes(x=psrna, y=mrna)) + geom_point(color="#44D4EB")+ theme_classic()+geom_smooth(method = "lm", color="#DE616A")+
labs(x = "psRNA_count")+labs(y = "mRNA_count")+stat_cor(method="pearson",size = 8)+theme(text = element_text(size = 20))
ggplot(chromesome_distribution, aes(x=pasrna, y=mrna)) + geom_point(color="#44D4EB")+ theme_classic()+geom_smooth(method = "lm", color="#DE616A")+
labs(x = "pasRNA_count")+labs(y = "mRNA_count")+stat_cor(method="pearson",size = 8)+theme(text = element_text(size = 20))
###reshape and clean data to linux rnadecay package
output = read.csv("H:/pas_output_cpm.txt",sep = '\t',row.names = 1)
library(dplyr)
rm(list=ls())
###reshape and clean data to linux rnadecay package
output = read.csv("H:/pas_output_cpm.txt",sep = '\t',row.names = 1)
library(dplyr)
View(output)
a = read.csv("H:/output.txt",sep = '\t')
View(a)
colSums(a$SRR8131644.sort.bam)
colSums(a)
sum(a$SRR8131644.sort.bam)
18/11996
###reshape and clean data to linux rnadecay package
output = read.csv("H:/ps_output_cpm.txt",sep = '\t',row.names = 1)
View(output)
View(output)
View(a)
###reshape and clean data to linux rnadecay package
output = read.csv("H:/pas_output_cpm.txt",sep = '\t',row.names = 1)
View(output)
#output$mean = (output$SRR8131644.sort.bam+output$SRR8131645.sort.bam)/2
#output =filter(output,mean>4)
#output =  dplyr::select(output, -c('mean','SRR8131651.sort.bam'))
#output$SRR8131651.sort.bam = output$SRR8131650.sort.bam
output =  dplyr::select(output, -c('SRR8131651.sort.bam'))
output$SRR8131651.sort.bam = output$SRR8131650.sort.bam
rpms = output
### latest shape data
#rpms = read.csv("H:/prna_transcript_analysis/new_prna/antisense_hepg2_2.txt",sep = '\t',skip = 1,row.names = 1)
colnames(rpms) = c("hepg2_00_r1","hepg2_00_r2","hepg2_60_r1","hepg2_60_r2","hepg2_180_r1","hepg2_180_r2","hepg2_360_r1","hepg2_360_r2")
rpms = filter(rpms,hepg2_00_r1>0,hepg2_00_r2>0)
#rpms[] = lapply(rpms, function(x) x*10^6/sum(x))
sham = rpms
colnames(sham)=c("sham_00_r1","sham_00_r2","sham_60_r1","sham_60_r2","sham_180_r1","sham_180_r2","sham_360_r1","sham_360_r2")
hepg2_linux = as.data.frame(cbind(rpms,sham))
rm (sham)
write.csv(na.omit(hepg2_linux),"H:/prna_transcript_analysis/RNAdecay/RNA_decay/pas_hepg2_linux.csv")
output = read.csv("H:/ps_output_cpm.txt",sep = '\t',row.names = 1)
library(dplyr)
#output$mean = (output$SRR8131644.sort.bam+output$SRR8131645.sort.bam)/2
#output =filter(output,mean>4)
#output =  dplyr::select(output, -c('mean','SRR8131651.sort.bam'))
#output$SRR8131651.sort.bam = output$SRR8131650.sort.bam
output =  dplyr::select(output, -c('SRR8131651.sort.bam'))
output$SRR8131651.sort.bam = output$SRR8131650.sort.bam
rpms = output
### latest shape data
#rpms = read.csv("H:/prna_transcript_analysis/new_prna/antisense_hepg2_2.txt",sep = '\t',skip = 1,row.names = 1)
colnames(rpms) = c("hepg2_00_r1","hepg2_00_r2","hepg2_60_r1","hepg2_60_r2","hepg2_180_r1","hepg2_180_r2","hepg2_360_r1","hepg2_360_r2")
rpms = filter(rpms,hepg2_00_r1>0,hepg2_00_r2>0)
#rpms[] = lapply(rpms, function(x) x*10^6/sum(x))
sham = rpms
colnames(sham)=c("sham_00_r1","sham_00_r2","sham_60_r1","sham_60_r2","sham_180_r1","sham_180_r2","sham_360_r1","sham_360_r2")
hepg2_linux = as.data.frame(cbind(rpms,sham))
rm (sham)
write.csv(na.omit(hepg2_linux),"H:/prna_transcript_analysis/RNAdecay/RNA_decay/ps_hepg2_linux.csv")
